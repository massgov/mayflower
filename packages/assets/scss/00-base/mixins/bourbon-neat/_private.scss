@use "00-base/variables" as *;
// Not function for Libsass compatibility
// https://github.com/sass/libsass/issues/368

@function is-not($value) {

  @return if($value, false, true);
}

// Checks if a number is even

@function is-even($int) {

  @return $int % 2 == 0;
}

// Checks if an element belongs to a list or not

@function belongs-to($tested-item, $list) {

  @return is-not(not-belongs-to($tested-item, $list));
}

@function not-belongs-to($tested-item, $list) {

  @return is-not(index($list, $tested-item));
}

// Contains display value

@function contains-display-value($query) {

  @return belongs-to(table, $query)
       or belongs-to(block, $query)
       or belongs-to(inline-block, $query)
       or belongs-to(inline, $query);
}

// Parses the first argument of span-columns()

@function container-span($span: $span) {

  @if length($span) == 3 {
    $container-columns: nth($span, 3);

    @return $container-columns;
  } @else if length($span) == 2 {
    $container-columns: nth($span, 2);

    @return $container-columns;
  }

  @return $grid-columns;
}

@function container-shift($shift: $shift) {
  $parent-columns: $grid-columns !default !global;

  @if length($shift) == 3 {
    $container-columns: nth($shift, 3);

    @return $container-columns;
  } @else if length($shift) == 2 {
    $container-columns: nth($shift, 2);

    @return $container-columns;
  }

  @return $parent-columns;
}

// Generates a striped background

@function gradient-stops($grid-columns, $color: $visual-grid-color) {
  $transparent: transparent;
  $alt-color: darken($color, 10%);

  $column-width: flex-grid(1, $grid-columns);
  $gutter-width: flex-gutter($grid-columns);
  $column-offset: $column-width;
  $alternate: false;

  $values: ($transparent 0, if($alternate, $color, $alt-color) 0);

  @for $i from 1 to $grid-columns*2 {

    @if is-even($i) {
      $values: append($values, $transparent $column-offset, comma);
      $values: append($values, if($alternate, $color, $alt-color) $column-offset, comma);
      $column-offset: $column-offset + $column-width;
    } @else {
      $values: append($values, if($alternate, $color, $alt-color) $column-offset, comma);
      $values: append($values, $transparent $column-offset, comma);
      $column-offset: $column-offset + $gutter-width;

      $alternate: not $alternate;
    }
  }

  @return $values;
}

// Layout direction

@function get-direction($layout, $default) {
  $direction: null;

  @if to-upper-case($layout) == "LTR" or to-upper-case($layout) == "RTL" {
    $direction: direction-from-layout($layout);
  } @else {
    $direction: direction-from-layout($default);
  }

  @return $direction;
}

@function direction-from-layout($layout) {
  $direction: null;

  @if to-upper-case($layout) == "LTR" {
    $direction: right;
  } @else {
    $direction: left;
  }

  @return $direction;
}

@function get-opposite-direction($direction) {
  $opposite-direction: left;

  @if $direction == "left" {
    $opposite-direction: right;
  }

  @return $opposite-direction;
}


@function to-number($string) {
  $string: str-replace($string, " ", "");
  $strings: "0" "1" "2" "3" "4" "5" "6" "7" "8" "9";
  $numbers:  0 1 2 3 4 5 6 7 8 9;
  $result: 0;

  @for $i from 1 through str-length($string) {
    $character: str-slice($string, $i, $i);
    $index: index($strings, $character);

    @if not $index {

      @warn "Unknown character `#{$character}`.";

      @return false;
    }

    $number: nth($numbers, $index);
    $result: $result * 10 + $number;
  }

  @return $result;
}

@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    $first: str-slice($string, 1, $index - 1);
    $last-slice: str-slice($string, $index + str-length($search));
    $last: str-replace($last-slice, $search, $replace);

    @return $first + $replace + $last;
  }

  @return $string;
}

$parent-columns: $grid-columns !default;
$fg-column: $column;
$fg-gutter: $gutter;
$fg-max-columns: $grid-columns;

@function flex-grid($columns, $container-columns: $fg-max-columns) {
  $width: flex-width($columns);
  $container-width: flex-width($container-columns);

  @return percentage($width / $container-width);
}

@function flex-gutter($container-columns: $fg-max-columns, $gutter: $fg-gutter) {
  $container-width: flex-width($container-columns);

  @return percentage($gutter / $container-width);
}

@function flex-width($n, $column-width: $fg-column, $gutter-width: $fg-gutter) {

  @return $n * $column-width + ($n - 1) * $gutter-width;
}

@function get-parent-columns($columns) {

  @if $columns != $grid-columns {
    $parent-columns: $columns !global;
  } @else {
    $parent-columns: $grid-columns !global;
  }

  @return $parent-columns;
}

@function is-display-table($container-is-display-table, $display) {

  @return $container-is-display-table == true or $display == table;
}